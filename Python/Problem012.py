"""
Project Euler, problem 12
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors? "

answer = 76576500  # correct

"""

import math


def divisor_count(num):

    count = 0
    for x in range(1, math.ceil(math.sqrt(num))):
        if math.sqrt(num) == x:
            count += 1
        elif num % x == 0:
            count += 2

    return count


answer = 0

for x in range(1, 1000000):
    if x % 100 == 0:
        print(answer)
    if divisor_count(answer) > 500:
        print(answer, " has ", divisor_count(answer), " divisors")
        exit()
    else:
        answer += x
