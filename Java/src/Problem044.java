/* Project Euler, problem 44
 * 
 * Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2.
 * The first ten pentagonal numbers are:
 * 
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * 
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,their difference,
 * 70 - 22 = 48, is not pentagonal.
 * 
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
 * difference are pentagonal and D = |Pk - Pj| is minimized;
 * what is the value of D?
 * 
 * answer = 5482660;  //correct but takes longer than 1 minute
 */


public class Problem044 {
	public static void main(String[] args){
		
		/*********************************************************
		 * Completed on Tue, 2 Oct 2018, 11:45
		 * new solution, creates pentagonal numbers on the fly,
		 * compares sum and difference to inverse equation 
		 * (retrieved from wikipedia).
		 */
		
		for (int n = 1; n < 2500; n++) {
			for (int m = 1; m < 2500; m++) {
				int j = n * (3 * n - 1) / 2;
				int k = m * (3 * m - 1) / 2;
				if(j != k && isPent(j + k) && isPent(Math.abs(j - k))){
					System.out.println(Math.abs(j - k));
					return;
				}
			}
		}
	}
	
	private static boolean isPent(int number) {
		//this equation is the inverse of the pentagonal formula above
		//if a number is pentagonal, this fomula will return a whole number
	    double tmp = (Math.sqrt(1 + 24 * number) + 1.0) / 6.0;
	    return tmp == ((int)tmp);
		}
	
		/*********************************************************
		 * Completed on Fri, 21 Sep 2018, 15:51
		 * old solution, creates list of pentagonal numbers,
		 * cycles and compares each sum and difference to the list
		 * takes longer than 1 minute

		ArrayList<Integer> pent = new ArrayList<Integer>();
		
		for (int i = 1; i <= 10000; i++) {
			pent.add(i * (3 * i - 1) / 2);
		}
		
		for (int i = 0; i < pent.size(); i++) {
			for (int j = 0; j < pent.size(); j++) {
				int pj = pent.get(i);
				int pk = pent.get(j);
				if(j != i && pk + pj < pent.get(pent.size() - 1)){

					System.out.println("checking: " + pj + " " + pk);
					
					if(pent.contains(Math.abs(pk - pj)) 
					&& pent.contains(pk + pj)){
						System.out.println("D: " + Math.abs(pk - pj));
						return;
					}
				}
			}
		}
	}
	*/

		
}
